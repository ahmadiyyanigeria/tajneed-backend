// <auto-generated />
using System;
using System.Collections.Generic;
using Domain.Entities;
using Infrastructure.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240801204829_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuditTrail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_occurred");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("details");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("audit_trails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AuxillaryBody", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AuxillaryBodyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auxillary_body_name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("GroupGender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id");

                    b.ToTable("auxillary_bodies", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BiodataUpdateCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BiatDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("biat_date");

                    b.Property<string>("BiometricId")
                        .HasColumnType("text")
                        .HasColumnName("biometric_id");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<string>("ChildrenNos")
                        .HasColumnType("text")
                        .HasColumnName("children_nos");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employment_status");

                    b.Property<string>("FatherNo")
                        .HasColumnType("text")
                        .HasColumnName("father_no");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("HouseholdMemberId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("household_member_id");

                    b.Property<bool>("IsBornMember")
                        .HasColumnType("boolean")
                        .HasColumnName("is_born_member");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jamaat_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MaidenName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("maiden_name");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("marital_status");

                    b.Property<string>("MembershipStatusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("membership_status_id");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nationality_id");

                    b.Property<string>("NextOfKinPhoneNo")
                        .HasColumnType("text")
                        .HasColumnName("next_of_kin_phone_no");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Occupation")
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<string>("SpouseNo")
                        .HasColumnType("text")
                        .HasColumnName("spouse_no");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("HouseholdMemberId");

                    b.HasIndex("JamaatId");

                    b.HasIndex("MembershipStatusId");

                    b.HasIndex("NationalityId");

                    b.ToTable("biodata_update_cases", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CaseTypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_type_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("member_id");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reference_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("cases", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CaseType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id");

                    b.ToTable("case_types", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Circuit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CircuitCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("circuit_code");

                    b.Property<string>("CircuitName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("circuit_name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id");

                    b.ToTable("circuits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Code", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("codes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CodeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CodeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.ToTable("code_values", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DuplicateAccountCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("OtherAccounts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("other_accounts");

                    b.Property<string>("PrimaryAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_account");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("duplicate_account_cases", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HouseHold", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("households", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.HouseHoldMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("HouseHoldId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("household_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("member_id");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position_id");

                    b.HasKey("Id");

                    b.HasIndex("HouseHoldId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PositionId");

                    b.ToTable("household_members", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Jamaat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CircuitId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("circuit_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JamaatCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jamaat_code");

                    b.Property<string>("JamaatName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jamaat_name");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.ToTable("jamaats", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AimsNo")
                        .HasColumnType("text")
                        .HasColumnName("aims_no");

                    b.Property<string>("AuxillaryBodyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auxillary_body_id");

                    b.Property<DateTime?>("BiatDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("biat_date");

                    b.Property<string>("ChandaNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chanda_no");

                    b.Property<string>("ChildrenNos")
                        .HasColumnType("text")
                        .HasColumnName("children_nos");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employment_status");

                    b.Property<string>("FatherNo")
                        .HasColumnType("text")
                        .HasColumnName("father_no");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsBornMember")
                        .HasColumnType("boolean")
                        .HasColumnName("is_born_member");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jamaat_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("marital_status");

                    b.Property<string>("MembershipStatusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("membership_status_id");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("NationalityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nationality_id");

                    b.Property<string>("NextOfKinAddress")
                        .HasColumnType("text")
                        .HasColumnName("next_of_kin_address");

                    b.Property<string>("NextOfKinName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("next_of_kin_name");

                    b.Property<string>("NextOfKinPhoneNo")
                        .HasColumnType("text")
                        .HasColumnName("next_of_kin_phone_no");

                    b.Property<string>("Occupation")
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_no");

                    b.Property<string>("RecordFlag")
                        .HasColumnType("text")
                        .HasColumnName("record_flag");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<string>("SpouseNo")
                        .HasColumnType("text")
                        .HasColumnName("spouse_no");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("WasiyatNo")
                        .HasColumnType("text")
                        .HasColumnName("wasiyat_no");

                    b.HasKey("Id");

                    b.HasIndex("AuxillaryBodyId");

                    b.HasIndex("JamaatId");

                    b.HasIndex("MembershipStatusId");

                    b.HasIndex("NationalityId");

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MemberMovement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FromJamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_jamaat_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("member_id");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("movement_date");

                    b.Property<string>("ToJamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to_jamaat_id");

                    b.HasKey("Id");

                    b.HasIndex("FromJamaatId");

                    b.HasIndex("ToJamaatId");

                    b.ToTable("member_movements", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MembershipStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("membership_statuses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Nationality", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("nationalities", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PendingMemberRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<IReadOnlyList<MemberRequest>>("Requests")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("requests");

                    b.HasKey("Id");

                    b.ToTable("pending_member_requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RelocationCase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on");

                    b.Property<string>("NewJamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_jamaat_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("OldJamaatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_jamaat_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("NewJamaatId");

                    b.HasIndex("OldJamaatId");

                    b.ToTable("relocation_cases", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BiodataUpdateCase", b =>
                {
                    b.HasOne("Domain.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HouseHoldMember", "HouseholdMember")
                        .WithMany()
                        .HasForeignKey("HouseholdMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jamaat", "Jamaat")
                        .WithMany()
                        .HasForeignKey("JamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MembershipStatus", "MembershipStatus")
                        .WithMany()
                        .HasForeignKey("MembershipStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("HouseholdMember");

                    b.Navigation("Jamaat");

                    b.Navigation("MembershipStatus");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Domain.Entities.Case", b =>
                {
                    b.HasOne("Domain.Entities.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Entities.CodeValue", b =>
                {
                    b.HasOne("Domain.Entities.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Code");
                });

            modelBuilder.Entity("Domain.Entities.DuplicateAccountCase", b =>
                {
                    b.HasOne("Domain.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Domain.Entities.HouseHoldMember", b =>
                {
                    b.HasOne("Domain.Entities.HouseHold", "HouseHold")
                        .WithMany()
                        .HasForeignKey("HouseHoldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HouseHold");

                    b.Navigation("Member");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domain.Entities.Jamaat", b =>
                {
                    b.HasOne("Domain.Entities.Circuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.AuxillaryBody", "AuxillaryBody")
                        .WithMany()
                        .HasForeignKey("AuxillaryBodyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jamaat", "Jamaat")
                        .WithMany()
                        .HasForeignKey("JamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MembershipStatus", "MembershipStatus")
                        .WithMany()
                        .HasForeignKey("MembershipStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuxillaryBody");

                    b.Navigation("Jamaat");

                    b.Navigation("MembershipStatus");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Domain.Entities.MemberMovement", b =>
                {
                    b.HasOne("Domain.Entities.Jamaat", "FromJamaat")
                        .WithMany()
                        .HasForeignKey("FromJamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jamaat", "ToJamaat")
                        .WithMany()
                        .HasForeignKey("ToJamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromJamaat");

                    b.Navigation("ToJamaat");
                });

            modelBuilder.Entity("Domain.Entities.RelocationCase", b =>
                {
                    b.HasOne("Domain.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jamaat", "NewJamaat")
                        .WithMany()
                        .HasForeignKey("NewJamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jamaat", "OldJamaat")
                        .WithMany()
                        .HasForeignKey("OldJamaatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("NewJamaat");

                    b.Navigation("OldJamaat");
                });
#pragma warning restore 612, 618
        }
    }
}
